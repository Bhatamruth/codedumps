package javasample.java8.stringjoiner_examples;
//Java program to demonstrate
//add() method of StringJoiner

import java.util.StringJoiner;

public class StringJoiner_add
 {
	public static void main(String[] args)
	{

		// Creating StringJoiner with delimiter " "
		StringJoiner str = new StringJoiner(" ");

		// Adding elements in the StringJoiner
		str.add("Geeks");
		str.add("for");
		str.add("Geeks");

		// Print the StringJoiner
		System.out.println(str.toString());
	}
 }

package javasample.java8.stringjoiner_examples;


//Java program to demonstrate
//length() method of StringJoiner

import java.util.StringJoiner;

public class StringJoiner_length{
	public static void main(String[] args)
	{

		// Creating StringJoiner with delimiter " "
		StringJoiner str = new StringJoiner(" ");

		// Adding elements in the StringJoiner
		str.add("Geeks");
		str.add("for");
		str.add("Geeks");

		// Print the StringJoiner
		System.out.println("StringJoiner: "
						+ str.toString());

		// Printing the length of str
		// using length() method
		System.out.println(str.length());
	}
}

package javasample.java8.stringjoiner_examples;


//Java program to demonstrate
//merge() method of StringJoiner

import java.util.StringJoiner;

public class StringJoiner_merge {
	public static void main(String[] args)
	{

		// Creating StringJoiner with delimiter " "
		StringJoiner str1 = new StringJoiner(" ");

		// Adding elements in the StringJoiner
		str1.add("Geeks");
		str1.add("for");
		str1.add("Geeks");
		// Print the StringJoiner
		System.out.println("StringJoiner 1: "
						+ str1.toString());

		// Creating the second StringJoiner
		StringJoiner str2 = new StringJoiner(" ");

		str2.add("A");
		str2.add("Computer");
		str2.add("Portal");

		// Print the second StringJoiner
		System.out.println("StringJoiner 2: "
						+ str2.toString());

		// Merging the StringJoiner using merge()
		StringJoiner str = str1.merge(str2);

		// Printing the merged StringJoiner
		System.out.println("Merged StringJoiner : "
						+ str);
	}
}


package javasample.java8.stringjoiner_examples;

// Java program to demonstrate
// merge() method of StringJoiner

import java.util.StringJoiner;

public class StringJoiner_merge2 {
	public static void main(String[] args)
	{

		// Creating StringJoiner with delimiter ", "
		StringJoiner str1 = new StringJoiner(", ");

		// Adding elements in the StringJoiner
		str1.add("Geeks");
		str1.add("for");
		str1.add("Geeks");

		// Print the StringJoiner
		System.out.println("StringJoiner 1: "
						+ str1.toString());

		// Creating the second StringJoiner
		StringJoiner str2 = new StringJoiner(", ");

		str2.add("A");
		str2.add("Computer");
		str2.add("Portal");

		// Print the StringJoiner
		System.out.println("StringJoiner 2: "
						+ str2.toString());

		// Merging the StringJoiner using merge()
		StringJoiner str = str1.merge(str2);

		// Printing the merged StringJoiner
		System.out.println("Merged StringJoiner : "
						+ str);
	}
}
package javasample.java8.stringjoiner_examples;


//Java program to demonstrate
//toString() method of StringJoiner

import java.util.StringJoiner;

public class StringJoiner_toString{
	public static void main(String[] args)
	{

		// Creating StringJoiner with delimiter " "
		StringJoiner str = new StringJoiner(" ");

		// Adding elements in the StringJoiner
		str.add("Geeks");
		str.add("for");
		str.add("Geeks");

		// Print the StringJoiner
		// using toString() method
		System.out.println("StringJoiner: "
						+ str.toString());
	}
}


package javasample.java8.stringjoiner_examples;


//Java program to demonstrate
//toString() method of StringJoiner

import java.util.StringJoiner;

public class StringJoiner_toString2 {
	public static void main(String[] args)
	{

		// Creating StringJoiner with delimiter ""
		StringJoiner str = new StringJoiner(", ");

		// Adding elements in the StringJoiner
		str.add("Geeks");
		str.add("for");
		str.add("Geeks");
		str.add("A");
		str.add("Computer");
		str.add("Portal");

		// Print the StringJoiner
		// using toString() method
		System.out.println("StringJoiner: "
						+ str.toString());
	}}


package javasample.java8.stringjoiner_examples;
//Java program to Demonstrate Methods
//of StringJoiner class

//Importing required classes
import java.util.ArrayList;
import java.util.StringJoiner;

//Main class

public class StringJoiner1 {



	// Main driver method
	public static void main(String[] args)
	{
		// Creating an empty ArrayList of string type
		ArrayList<String> al = new ArrayList<>();

		// Adding elements to above List
		al.add("Ram");
		al.add("Shyam");
		al.add("Alice");
		al.add("Bob");

		// Creating object of class inside main()
		StringJoiner sj1 = new StringJoiner(",");

		// Using setEmptyValue() method
		sj1.setEmptyValue("sj1 is empty");
		System.out.println(sj1);

		// Using add() method
		sj1.add(al.get(0)).add(al.get(1));
		System.out.println(sj1);

		// Using length() method
		System.out.println("Length of sj1 : "
						+ sj1.length());

		StringJoiner sj2 = new StringJoiner(":");
		sj2.add(al.get(2)).add(al.get(3));

		// Using merge() method
		sj1.merge(sj2);

		// Using toString() method
		System.out.println(sj1.toString());

		System.out.println("Length of new sj1 : "
						+ sj1.length());
	}
}

package javasample.regex;


//Java program to demonstrate working of
//String matching in Java

//Importing Matcher and Pattern class
import java.util.regex.Matcher;
import java.util.regex.Pattern;

//Main class
class   Matcher_class{

	// Main driver method
	public static void main(String args[])
	{

		// Create a pattern to be searched
		// Custom pattern
		Pattern pattern = Pattern.compile("Java");

		// Search above pattern in "geeksforgeeks.org"
		Matcher m = pattern.matcher("Javaprogram");

		// Finding string using find() method
		while (m.find())

			// Print starting and ending indexes
			// of the pattern in the text
			// using this functionality of this class
			System.out.println("Pattern found from "
							+ m.start() + " to "
							+ (m.end() - 1));
	}
}


package javasample.regex;


//Java Program Demonstrating Working of matches() Method
//Pattern class

//Importing Pattern class from java.util.regex package
import java.util.regex.Pattern;

//Main class
class Pattern_class  {

	// Main driver method
	public static void main(String args[])
	{


		System.out.println(Pattern.matches(
			"DemonstratingWorking", "DemonstratingWorking"));


		System.out.println(
			Pattern.matches("DemonstratingWorking", "Demonstrating Working"));
	}
}


package javasample.regex;


//Java Program to check on Regex
import java.io.*;
import java.util.regex.*;

//Driver class
class Regex_Character_classes {
	// Main function
	public static void main(String[] args)
	{
		// Checks if the string matches with the regex
		// Should be single character a to z
		System.out.println(Pattern.matches("[a-z]", "j"));

		// Check if the element is range a to z or A to Z
		System.out.println(
			Pattern.matches("[a-zA-Z]", "java"));
	}
}

package javasample.regex;


//Java Program to implement regex
import java.io.*;
import java.util.regex.*;

//Driver Class
class Regex_finder {
	// Main Function
	public static void main(String[] args)
	{
		// Check if all elements are numbers
		System.out.println(Pattern.matches("\\d+", "1234"));

		// Check if all elements are non-numbers
		System.out.println(Pattern.matches("\\D+", "1234"));

		// Check if all the elements are non-numbers
		System.out.println(Pattern.matches("\\D+", "java"));

		// Check if all the elements are non-spaces
		System.out.println(Pattern.matches("\\S+", "java"));
	}
}


i have worked on the leave application app 
and here are code snippets
App.js
import React from 'react';
import { BrowserRouter as Router, Route } from 'react-router-dom';
import Header from './components/Header';
import Home from './pages/Home';
import LeaveRequests from './pages/LeaveRequests';
import './App.css';

function App() {
  return (
    <Router>
      <div className="App">
        <Header />
        <div className="App-content">
          <Route path="/" exact component={Home} />
          <Route path="/leave-requests" component={LeaveRequests} />
        </div>
      </div>
    </Router>
  );
}

export default App;

header.js
import React from 'react';
import AppBar from '@mui/material/AppBar';
import Toolbar from '@mui/material/Toolbar';
import Typography from '@mui/material/Typography';
import Button from '@mui/material/Button';
import IconButton from '@mui/material/IconButton';
import MenuIcon from '@mui/icons-material/Menu';

function Header() {
  return (
    <AppBar position="static">
      <Toolbar>
        <IconButton
          edge="start"
          color="inherit"
          aria-label="menu"
          sx={{ mr: 2 }}
        >
          <MenuIcon />
        </IconButton>
        <Typography variant="h6" component="div" sx={{ flexGrow: 1 }}>
          Leave Application
        </Typography>
        <Button color="inherit">Home</Button>
        <Button color="inherit">Leave Requests</Button>
        <Button color="inherit">Profile</Button>
        <Button color="inherit">Logout</Button>
      </Toolbar>
    </AppBar>
  );
}

export default Header;


LeaveForm.js
import React, { useState } from 'react';
import TextField from '@mui/material/TextField';
import Button from '@mui/material/Button';
import Grid from '@mui/material/Grid';

function LeaveForm() {
  const [leaveType, setLeaveType] = useState(''); // Leave type selection
  const [startDate, setStartDate] = useState(''); // Start date input
  const [endDate, setEndDate] = useState(''); // End date input
  const [reason, setReason] = useState(''); // Leave reason input

  const handleSubmit = (e) => {
    e.preventDefault();

    // Here, you can submit the leave request to your backend API
    // You can use a fetch() or Axios to send the data to the server

    // Example fetch() request:
    fetch('/api/leave-request', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        leaveType,
        startDate,
        endDate,
        reason,
      }),
    })
      .then((response) => response.json())
      .then((data) => {
        // Handle the response from the server as needed
        console.log(data);
      })
      .catch((error) => {
        console.error('Error:', error);
      });
  };

  return (
    <div>
      <h2>Leave Request Form</h2>
      <form onSubmit={handleSubmit}>
        <Grid container spacing={2}>
          <Grid item xs={12} sm={6}>
            <TextField
              label="Leave Type"
              variant="outlined"
              fullWidth
              required
              value={leaveType}
              onChange={(e) => setLeaveType(e.target.value)}
            />
          </Grid>
          <Grid item xs={12} sm={6}>
            <TextField
              label="Start Date"
              type="date"
              variant="outlined"
              fullWidth
              required
              value={startDate}
              onChange={(e) => setStartDate(e.target.value)}
            />
          </Grid>
          <Grid item xs={12} sm={6}>
            <TextField
              label="End Date"
              type="date"
              variant="outlined"
              fullWidth
              required
              value={endDate}
              onChange={(e) => setEndDate(e.target.value)}
            />
          </Grid>
          <Grid item xs={12}>
            <TextField
              label="Leave Reason"
              variant="outlined"
              fullWidth
              multiline
              rows={4}
              required
              value={reason}
              onChange={(e) => setReason(e.target.value)}
            />
          </Grid>
          <Grid item xs={12}>
            <Button
              type="submit"
              variant="contained"
              color="primary"
              fullWidth
            >
              Submit Leave Request
            </Button>
          </Grid>
        </Grid>
      </form>
    </div>
  );
}

export default LeaveForm;


LeaveRequest.js
import React, { useState } from 'react';
import Typography from '@mui/material/Typography';
import Table from '@mui/material/Table';
import TableBody from '@mui/material/TableBody';
import TableCell from '@mui/material/TableCell';
import TableContainer from '@mui/material/TableContainer';
import TableHead from '@mui/material/TableHead';
import TableRow from '@mui/material/TableRow';
import Paper from '@mui/material/Paper';
import Button from '@mui/material/Button';

function LeaveRequests() {
  // Sample leave request data (replace with your actual data)
  const [leaveRequests, setLeaveRequests] = useState([
    {
      id: 1,
      employee: 'John Doe',
      startDate: '2023-09-10',
      endDate: '2023-09-14',
      leaveType: 'Vacation',
      status: 'Approved',
    },
    {
      id: 2,
      employee: 'Jane Smith',
      startDate: '2023-09-15',
      endDate: '2023-09-18',
      leaveType: 'Sick Leave',
      status: 'Pending',
    },
    // Add more leave requests as needed
  ]);

  return (
    <div>
      <Typography variant="h4" gutterBottom>
        Leave Requests
      </Typography>
      <TableContainer component={Paper}>
        <Table aria-label="Leave Requests Table">
          <TableHead>
            <TableRow>
              <TableCell>ID</TableCell>
              <TableCell>Employee</TableCell>
              <TableCell>Start Date</TableCell>
              <TableCell>End Date</TableCell>
              <TableCell>Leave Type</TableCell>
              <TableCell>Status</TableCell>
              <TableCell>Action</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {leaveRequests.map((request) => (
              <TableRow key={request.id}>
                <TableCell>{request.id}</TableCell>
                <TableCell>{request.employee}</TableCell>
                <TableCell>{request.startDate}</TableCell>
                <TableCell>{request.endDate}</TableCell>
                <TableCell>{request.leaveType}</TableCell>
                <TableCell>{request.status}</TableCell>
                <TableCell>
                  <Button variant="outlined" color="primary">
                    View
                  </Button>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>
    </div>
  );
}

export default LeaveRequests;


LeaveList.js
import React from 'react';
import Paper from '@mui/material/Paper';
import Table from '@mui/material/Table';
import TableContainer from '@mui/material/TableContainer';
import TableHead from '@mui/material/TableHead';
import TableBody from '@mui/material/TableBody';
import TableRow from '@mui/material/TableRow';
import TableCell from '@mui/material/TableCell';
import Typography from '@mui/material/Typography';

function LeaveList({ leaveRequests }) {
  return (
    <Paper elevation={3}>
      <Typography variant="h5" component="div" align="center" sx={{ py: 2 }}>
        Leave Requests
      </Typography>
      <TableContainer>
        <Table>
          <TableHead>
            <TableRow>
              <TableCell>ID</TableCell>
              <TableCell>Employee Name</TableCell>
              <TableCell>Leave Type</TableCell>
              <TableCell>Start Date</TableCell>
              <TableCell>End Date</TableCell>
              <TableCell>Status</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {leaveRequests.map((request) => (
              <TableRow key={request.id}>
                <TableCell>{request.id}</TableCell>
                <TableCell>{request.employeeName}</TableCell>
                <TableCell>{request.leaveType}</TableCell>
                <TableCell>{request.startDate}</TableCell>
                <TableCell>{request.endDate}</TableCell>
                <TableCell>{request.status}</TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>
    </Paper>
  );
}

export default LeaveList;

