package javasample.AbstractMappractice;


//Java code to illustrate the equals() method

import java.util.*;

public class AbstractMappractice {
	public static void main(String[] args)
	{

		// Creating an empty AbstractMap
		AbstractMap<Integer, String>
			abstract_hash1 = new IdentityHashMap<Integer, String>();

		AbstractMap<Integer, String>
			abstract_hash2 = new IdentityHashMap<Integer, String>();

		// Mapping string values to int keys
		abstract_hash1.put(10, "had");
		abstract_hash1.put(15, "4");
		abstract_hash1.put(20, "had");
		abstract_hash1.put(25, "good");
		abstract_hash1.put(30, "day");

		// Mapping string values to int keys
		abstract_hash2.put(10, "had");
		abstract_hash2.put(15, "4");
		abstract_hash2.put(20, "had");
		abstract_hash2.put(25, "good");
		abstract_hash2.put(30, "day");

		// Displaying the IdentityHashMap
		System.out.println("First Map: "
						+ abstract_hash1);

		// Displaying the final IdentityHashMap
		System.out.println("Second Map: "
						+ abstract_hash2);

		// Displaying the equality
		System.out.println("Equality: "
						+ abstract_hash1.equals(abstract_hash2));
	}
}
package javasample.AbstractMappractice;






//Java code to illustrate the equals() method

import java.util.*;

public class AbstractMappractice {
	public static void main(String[] args)
	{

		// Creating an empty AbstractMap
		AbstractMap<Integer, String>
			abstract_hash1 = new IdentityHashMap<Integer, String>();

		AbstractMap<Integer, String>
			abstract_hash2 = new IdentityHashMap<Integer, String>();

		// Mapping string values to int keys
		abstract_hash1.put(10, "had");
		abstract_hash1.put(15, "4");
		abstract_hash1.put(20, "had");
		abstract_hash1.put(25, "good");
		abstract_hash1.put(30, "day");

		// Mapping string values to int keys
		abstract_hash2.put(10, "had");
		abstract_hash2.put(15, "4");
		abstract_hash2.put(20, "had");
		abstract_hash2.put(25, "good");
		abstract_hash2.put(30, "day");

		// Displaying the IdentityHashMap
		System.out.println("First Map: "
						+ abstract_hash1);

		// Displaying the final IdentityHashMap
		System.out.println("Second Map: "
						+ abstract_hash2);

		// Displaying the equality
		System.out.println("Equality: "
						+ abstract_hash1.equals(abstract_hash2));
	}
}





package javasample;


//Java code for serialization and deserialization
//of a Java object
import java.io.*;

class serialization_deserialization implements java.io.Serializable
{
	public int a;
	public String b;

	// Default constructor
	public serialization_deserialization(int a, String b)
	{
		this.a = a;
		this.b = b;
	}

}

class Test
{
	public static void main(String[] args)
	{
		serialization_deserialization object = new serialization_deserialization(1, "geeksforgeeks");
		String filename = "file.ser";
		
		// Serialization
		try
		{
			//Saving of object in a file
			FileOutputStream file = new FileOutputStream(filename);
			ObjectOutputStream out = new ObjectOutputStream(file);
			
			// Method for serialization of object
			out.writeObject(object);
			
			out.close();
			file.close();
			
			System.out.println("Object has been serialized");

		}
		
		catch(IOException ex)
		{
			System.out.println("IOException is caught");
		}


		serialization_deserialization object1 = null;

		// Deserialization
		try
		{
			// Reading the object from a file
			FileInputStream file = new FileInputStream(filename);
			ObjectInputStream in = new ObjectInputStream(file);
			
			// Method for deserialization of object
			object1 = (serialization_deserialization)in.readObject();
			
			in.close();
			file.close();
			
			System.out.println("Object has been deserialized ");
			System.out.println("a = " + object1.a);
			System.out.println("b = " + object1.b);
		}
		
		catch(IOException ex)
		{
			System.out.println("IOException is caught");
		}
		
		catch(ClassNotFoundException ex)
		{
			System.out.println("ClassNotFoundException is caught");
		}

	}
}
package javasample;

  
//Java program to illustrate Serializable interface
import java.io.*;

//By implementing Serializable interface
//we make sure that state of instances of class A
//can be saved in a file.
class A implements Serializable
{
	int i;
	String s;

	// A class constructor
	public A(int i,String s)
	{
		this.i = i;
		this.s = s;
	}
}

public class Serializable_interface1
{
	public static void main(String[] args)
	throws IOException, ClassNotFoundException
	{
		A a = new A(20,"NotFoundException");

		// Serializing 'a'
		FileOutputStream fos = new FileOutputStream("xyz.txt");
		ObjectOutputStream oos = new ObjectOutputStream(fos);
		oos.writeObject(a);

		// De-serializing 'a'
		FileInputStream fis = new FileInputStream("xyz.txt");
		ObjectInputStream ois = new ObjectInputStream(fis);
		A b = (A)ois.readObject();//down-casting object

		System.out.println(b.i+" "+b.s);

		// closing streams
		oos.close();
		ois.close();
	}
}

package javasample.regex;


//Java program to demonstrate working of
//String matching in Java

//Importing Matcher and Pattern class
import java.util.regex.Matcher;
import java.util.regex.Pattern;

//Main class
class   Matcher_class{

	// Main driver method
	public static void main(String args[])
	{

		// Create a pattern to be searched
		// Custom pattern
		Pattern pattern = Pattern.compile("Java");

		// Search above pattern in "geeksforgeeks.org"
		Matcher m = pattern.matcher("Javaprogram");

		// Finding string using find() method
		while (m.find())

			// Print starting and ending indexes
			// of the pattern in the text
			// using this functionality of this class
			System.out.println("Pattern found from "
							+ m.start() + " to "
							+ (m.end() - 1));
	}
}
package javasample.regex;


//Java Program Demonstrating Working of matches() Method
//Pattern class

//Importing Pattern class from java.util.regex package
import java.util.regex.Pattern;

//Main class
class Pattern_class  {

	// Main driver method
	public static void main(String args[])
	{


		System.out.println(Pattern.matches(
			"DemonstratingWorking", "DemonstratingWorking"));


		System.out.println(
			Pattern.matches("DemonstratingWorking", "Demonstrating Working"));
	}
}

package javasample.regex;


//Java Program to check on Regex
import java.io.*;
import java.util.regex.*;

//Driver class
class Regex_Character_classes {
	// Main function
	public static void main(String[] args)
	{
		// Checks if the string matches with the regex
		// Should be single character a to z
		System.out.println(Pattern.matches("[a-z]", "j"));

		// Check if the element is range a to z or A to Z
		System.out.println(
			Pattern.matches("[a-zA-Z]", "java"));
	}
}

package javasample.regex;


//Java Program to implement regex
import java.io.*;
import java.util.regex.*;

//Driver Class
class Regex_finder {
	// Main Function
	public static void main(String[] args)
	{
		// Check if all elements are numbers
		System.out.println(Pattern.matches("\\d+", "1234"));

		// Check if all elements are non-numbers
		System.out.println(Pattern.matches("\\D+", "1234"));

		// Check if all the elements are non-numbers
		System.out.println(Pattern.matches("\\D+", "java"));

		// Check if all the elements are non-spaces
		System.out.println(Pattern.matches("\\S+", "java"));
	}
}



