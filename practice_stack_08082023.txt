package javasample.stack_collections_080823;


//Java code for stack implementation

import java.io.*;
import java.util.*;

public class stackdemo1
{
	// Pushing element on the top of the stack
	static void stack_push(Stack<Integer> stack)
	{
		for(int i = 0; i < 5; i++)
		{
			stack.push(i);
		}
	}
	
	// Popping element from the top of the stack
	static void stack_pop(Stack<Integer> stack)
	{
		System.out.println("Pop Operation:");

		for(int i = 0; i < 5; i++)
		{
			Integer y = (Integer) stack.pop();
			System.out.println(y);
		}
	}

	// Displaying element on the top of the stack
	static void stack_peek(Stack<Integer> stack)
	{
		Integer element = (Integer) stack.peek();
		System.out.println("Element on stack top: " + element);
	}
	
	// Searching element in the stack
	static void stack_search(Stack<Integer> stack, int element)
	{
		Integer pos = (Integer) stack.search(element);

		if(pos == -1)
			System.out.println("Element not found");
		else
			System.out.println("Element is found at position: " + pos);
	}


	public static void main (String[] args)
	{
		Stack<Integer> stack = new Stack<Integer>();

		stack_push(stack);
		stack_pop(stack);
		stack_push(stack);
		stack_peek(stack);
		stack_search(stack, 2);
		stack_search(stack, 6);
	}
}


package javasample.stack_collections_080823;


//Java program to add the
//elements in the stack
import java.io.*;
import java.util.*;

class StackDemo2 {

	// Main Method
	public static void main(String[] args)
	{

		// Default initialization of Stack
		Stack stack1 = new Stack();

		// Initialization of Stack
		// using Generics
		Stack<String> stack2 = new Stack<String>();

		// pushing the elements
		stack1.push("4");
		stack1.push("All");
		stack1.push("Geeks");

		stack2.push("Geeks");
		stack2.push("For");
		stack2.push("Geeks");

		// Printing the Stack Elements
		System.out.println(stack1);
		System.out.println(stack2);
	}
}


package javasample.stack_collections_080823;


//Java program to demonstrate the accessing
//of the elements from the stack
import java.util.*;
import java.io.*;

public class StackDemo3 {

	// Main Method
	public static void main(String args[])
	{
		// Creating an empty Stack
		Stack<String> stack = new Stack<String>();

		// Use push() to add elements into the Stack
		stack.push("Welcome");
		stack.push("To");
		stack.push("Geeks");
		stack.push("For");
		stack.push("Geeks");

		// Displaying the Stack
		System.out.println("Initial Stack: " + stack);

		// Fetching the element at the head of the Stack
		System.out.println("The element at the top of the"
						+ " stack is: " + stack.peek());

		// Displaying the Stack after the Operation
		System.out.println("Final Stack: " + stack);
	}
}


package javasample.stack_collections_080823;
// Java program to demonstrate the removing
// of the elements from the stack
import java.util.*;
import java.io.*;

public class stackdemo4 {

		public static void main(String args[])
		{
			// Creating an empty Stack
			Stack<Integer> stack = new Stack<Integer>();

			// Use add() method to add elements
			stack.push(10);
			stack.push(15);
			stack.push(30);
			stack.push(20);
			stack.push(5);

			// Displaying the Stack
			System.out.println("Initial Stack: " + stack);

			// Removing elements using pop() method
			System.out.println("Popped element: "
							+ stack.pop());
			System.out.println("Popped element: "
							+ stack.pop());

			// Displaying the Stack after pop operation
			System.out.println("Stack after pop operation "
							+ stack);
		}
	

}
package javasample.stack_collections_080823;


import java.util.Stack;

public class stackdemo5 {
	public static void main(String[] args) {
		// Create a new stack
		Stack<Integer> stack = new Stack<>();

		// Push elements onto the stack
		stack.push(1);
		stack.push(2);
		stack.push(3);
		stack.push(4);

		// Pop elements from the stack
		while(!stack.isEmpty()) {
			System.out.println(stack.pop());
		}
	}
}


package javasample.stack_collections_080823;


//A Java Program to show implementation
//of Stack using ArrayDeque

import java.util.*;

class stackdemo6 {
	public static void main (String[] args) {
		Deque<Character> stack = new ArrayDeque<Character>();
		stack.push('A');
		stack.push('B');
		System.out.println(stack.peek());
		System.out.println(stack.pop());
	}
}
package javasample.stack_collections_080823;



import java.util.*;
import java.util.stream.Collectors;

class stackdemo7 {
	public static void main (String[] args) {

		Stack<Integer> stack = new Stack<>();
		Deque<Integer> deque = new ArrayDeque<>();

		stack.push(1);//1 is the top
		deque.push(1);//1 is the top
		stack.push(2);//2 is the top
		deque.push(2);//2 is the top

		List<Integer> list1 = stack.stream().collect(Collectors.toList());//[1,2]
		System.out.println("Using Stack -");
		for(int i = 0; i < list1.size(); i++){
			System.out.print(list1.get(i) + " " );
		}
		System.out.println();

		List<Integer> list2 = deque.stream().collect(Collectors.toList());//[2,1]
		System.out.println("Using Deque -");
		for(int i = 0; i < list2.size(); i++){
			System.out.print(list2.get(i) + " " );
		}
		System.out.println();
	
	}
}
