lambda expressions
its a part of advanced java 8
express instances of functional interfaces 
Lambda Expressions in Java are the same as lambda functions which are the short block of code that accepts input as parameters and returns a resultant value

package javasample.lambda_expression;


//Java program to demonstrate lambda expressions
//to implement a user defined functional interface.

//A sample functional interface (An interface with
//single abstract method
interface FuncInterface
{
	// An abstract function
	void abstractFun(int x);

	// A non-abstract (or default) function
	default void normalFun()
	{
	System.out.println("Hello");
	}
}

class lambda1
{
	public static void main(String args[])
	{
		// lambda expression to implement above
		// functional interface. This interface
		// by default implements abstractFun()
		FuncInterface fobj = (int x)->System.out.println(2*x);

		// This calls above lambda expression and prints 10.
		fobj.abstractFun(5);
	}
}


package javasample.lambda_expression;


//Lambda Expression with Single parameter
//A Java program to demonstrate simple lambda expressions
import java.util.ArrayList;
class lambda2 {
	public static void main(String args[])
	{
		// Creating an ArrayList with elements
		// {1, 2, 3, 4}
		ArrayList<Integer> arrL = new ArrayList<Integer>();
		arrL.add(1);
		arrL.add(2);
		arrL.add(3);
		arrL.add(4);

		// Using lambda expression to print all elements
		// of arrL
		arrL.forEach(n -> System.out.println(n));

		// Using lambda expression to print even elements
		// of arrL
		arrL.forEach(n -> {
			if (n % 2 == 0)
				System.out.println(n);
		});
	}
}






package javasample.lambda_expression;

//A Java program to demonstrate the working of a lambda expression with two arguments. 
//Java program to demonstrate working of lambda expressions
public class lambda3 {
	// operation is implemented using lambda expressions
	interface FuncInter1 {
		int operation(int a, int b);
	}

	// sayMessage() is implemented using lambda expressions
	// above
	interface FuncInter2 {
		void sayMessage(String message);
	}

	// Performs FuncInter1's operation on 'a' and 'b'
	private int operate(int a, int b, FuncInter1 fobj)
	{
		return fobj.operation(a, b);
	}

	public static void main(String args[])
	{
		// lambda expression for addition for two parameters
		// data type for x and y is optional.
		// This expression implements 'FuncInter1' interface
		FuncInter1 add = (int x, int y) -> x + y;

		// lambda expression multiplication for two
		// parameters This expression also implements
		// 'FuncInter1' interface
		FuncInter1 multiply = (int x, int y) -> x * y;

		// Creating an object of Test to call operate using
		// different implementations using lambda
		// Expressions
		lambda3 tobj = new lambda3();

		// Add two numbers using lambda expression
		System.out.println("Addition is "
						+ tobj.operate(6, 3, add));

		// Multiply two numbers using lambda expression
		System.out.println("Multiplication is "
						+ tobj.operate(6, 3, multiply));

		// lambda expression for single parameter
		// This expression implements 'FuncInter2' interface
		FuncInter2 fobj = message
			-> System.out.println("Hello " + message);
		fobj.sayMessage("Geek");
	}
}


package javasample.lambda_expression;


//Java code to illustrate lambda expression
//without parameters

//functional interface
//without parameters
interface Test1 {
	void print();
}

class  lambda_noparameter{
	// functional interface parameter is passed
	static void fun(Test1 t) { t.print(); }
	public static void main(String[] args)
	{
		// lambda expression is passed
		// without parameter to functional interface t
		fun(() -> System.out.println("Hello"));
	}
}


package javasample.lambda_expression;


//Java code to illustrate lambda expression
//with multi parameters

//functional interface Test3
//with 2 parameter of Integer type
interface Test3 {
	// The void type and the Integer type
	// is automatically inferred from here
	// and assigned to the lambda expression
	void print(Integer p1, Integer p2);
}

class lambda5 {
	// takes parameter of Test3 type followed
	// by 2 integer parameters p1 and p2
	static void fun(Test3 t, Integer p1, Integer p2)
	{
		// calls the print function
		t.print(p1, p2);
	}
	public static void main(String[] args)
	{
		// lambda expression is passed
		// with two parameters
		// lambda expression is mapped to the
		// double argument abstract function in the
		// functional interface Test3
		fun((p1, p2)
				-> System.out.println(p1 + " " + p2),
			10, 20);
	}
}


package javasample.lambda_expression;

public class lambda_threadcreation{  
    public static void main(String[] args) {  
      
        //Thread Example without lambda  
        Runnable r1=new Runnable(){  
            public void run(){  
                System.out.println("Thread1 is running...");  
            }  
        };  
        Thread t1=new Thread(r1);  
        t1.start();  
        //Thread Example with lambda  
        Runnable r2=()->{  
                System.out.println("Thread2 is running...");  
        };  
        Thread t2=new Thread(r2);  
        t2.start();  
    }  
}   


package javasample.lambda_expression;

//Demonstration of using lambdas with the Stream API

import java.util.ArrayList;
import java.util.List;

public class lambda_streamapi {

    // create an object of list using ArrayList
    static List<String> places = new ArrayList<>();

    // preparing our data
    public static List getPlaces(){

        // add places and country to the list
        places.add("Nepal, Kathmandu");
        places.add("Nepal, Pokhara");
        places.add("India, Delhi");
        places.add("USA, New York");
        places.add("Africa, Nigeria");

        return places;
    }

    public static void main( String[] args ) {

        List<String> myPlaces = getPlaces();
        System.out.println("Places from Nepal:");
        
        // Filter places from Nepal
        myPlaces.stream()
                .filter((p) -> p.startsWith("Nepal"))
                .map((p) -> p.toUpperCase())
                .sorted()
                .forEach((p) -> System.out.println(p));
    }

}
