
package javasample.MarkerInterfacedemo;
//Cloneable interface : Cloneable interface is present in java.lang package. There is a method clone() in Object class. A class that implements the Cloneable interface indicates that it is legal for clone() method to make a field-for-field copy of instances of that class. 
//Java program to illustrate Cloneable interface
import java.lang.Cloneable;

//By implementing Cloneable interface
//we make sure that instances of class A
//can be cloned.
class A implements Cloneable
{
	int i;
	String s;

	// A class constructor
	public A(int i,String s)
	{
		this.i = i;
		this.s = s;
	}

	// Overriding clone() method
	// by simply calling Object class
	// clone() method.
	@Override
	protected Object clone()
	throws CloneNotSupportedException
	{
		return super.clone();
	}
}


public class CloneableInterface1 {
	public static void main(String[] args)
		throws CloneNotSupportedException
	{
		A a = new A(20, "intheforestdenseforest");

		// cloning 'a' and holding
		// new cloned object reference in b

		// down-casting as clone() return type is Object
		A b = (A)a.clone();

		System.out.println(b.i);
		System.out.println(b.s);
	}
}



import java .util.*;
class  {

	public static void main(String args[]) {
		int x = 5;
		float y = 3.14f;
		long z=6000;

		// autoboxing
		Integer intobj = x;
		Float floatobj=y;
		Long longobj=z;
		// print
		System.out.println(intobj);
		System.out.println(floatobj);
		System.out.println(longobj);
	}
}


package javasample.wrapperclassdemo;


//Java Program to Show Wrapper class concept

//Importing input output classes
import java.io.*;

//Main Class
class wrapperclass1 {

	// Main driver method
	public static void main(String[] args)
	{

		// In java, in case of floating values
		// they are stored as x = (y)f

		// Conversion of float value to int
		Float floatWrap = Float.valueOf(45.158f);

		// Invoking the intValue() method over the stored
		// float value to store
		int floatToInt = floatWrap.intValue();

		// Print the non-primitive(Integer) value
		System.out.println(floatToInt);

		// Now for another number N
		// Say N = 5

		// Convert the binary number to the integer value
		Integer five = Integer.valueOf("101", 2);

		// Print the number
		System.out.println(five);
	}
}


package javasample.wrapperclassdemo;
class Autoboxing_wrapperclass {

	public static void main(String args[]) {
		int x = 5;
		float y = 3.14f;
		long z=6000;

		// autoboxing
		Integer intobj = x;
		Float floatobj=y;
		Long longobj=z;
		// print
		System.out.println(intobj);
		System.out.println(floatobj);
		System.out.println(longobj);
	}
}

Method 1: Using the constructor of the wrapper class

Syntax:

ClassName object = new ClassName(argument);

package javasample.wrapperclassdemo;


//Importing input output classes
import java.io.*;

//Main class
class wrapperclass_usingconstructor {

	// Main driver method
	public static void main (String[] args) {

		// Creating and initializing two integer numbers
		// Value is passed as an argument to which it is initialized
		
		// Custom entries
		// Number 1 where N = 5
		Integer num1 = new Integer(5);
		// Number 2 where N = 5
		Integer num2 = new Integer(5);
		
		// Creating objects of Integer class
		// using valueOf() method
	
		// Again, creating and initializing two integer numbers
		// Value is passed as an argument to which it is initialized
		Integer num3 = Integer.valueOf(5);
		Integer num4 = Integer.valueOf(5);
		

		// Now by far, all the objects contain the same value
		// N = 5
		
		// Boolean will return true if numbers are equal
		// else returning false

		// Comparing two numbers
		boolean value1 = (num1 == num2);
		boolean value2 = (num3 == num4);
		
		// Print and display the bool results
		System.out.println(value1);
		System.out.println(value2);
	}
}


Method 2: Using the valueOf() method provided by the Wrapper classes

Syntax:

ClassName object = ClassName.valueOf(argument);

package javasample.wrapperclassdemo;


//Importing input output classes
import java.io.*;

//Main class
class wrapperclass_usingValueOf {

	// Main driver method
	public static void main (String[] args) {

		// Creating and initializing two integer numbers
		// Value is passed as an argument to which it is initialized
		
		// Custom entries
		// Number 1 where N = 5
		Integer num1 = new Integer(5);
		// Number 2 where N = 5
		Integer num2 = new Integer(5);
		
		// Creating objects of Integer class
		// using valueOf() method
	
		// Again, creating and initializing two integer numbers
		// Value is passed as an argument to which it is initialized
		Integer num3 = Integer.valueOf(5);
		Integer num4 = Integer.valueOf(5);
		

		// Now by far, all the objects contain the same value
		// N = 5
		
		// Boolean will return true if numbers are equal
		// else returning false

		// Comparing two numbers
		boolean value1 = (num1 == num2);
		boolean value2 = (num3 == num4);
		
		// Print and display the bool results
		System.out.println(value1);
		System.out.println(value2);
	}
}




package javasample;

public class characterclass {

	public static void main(String[] args)
    {
System.out.println(Character.isLetter('A'));

System.out.println(Character.isLetter('0'));

//print false as A is character
System.out.println(Character.isDigit('A'));

System.out.println(Character.isDigit('0'));

System.out.println(Character.isWhitespace('A'));
System.out.println(Character.isWhitespace(' '));
System.out.println(Character.isWhitespace('\n'));
System.out.println(Character.isWhitespace('\t'));

// ASCII value of tab
System.out.println(Character.isWhitespace(9));

System.out.println(Character.isWhitespace('9'));

System.out.println(Character.isUpperCase('A'));
System.out.println(Character.isUpperCase('a'));
System.out.println(Character.isUpperCase(65));

System.out.println(Character.isLowerCase('A'));
System.out.println(Character.isLowerCase('a'));
System.out.println(Character.isLowerCase(97));

System.out.println(Character.toUpperCase('a'));
System.out.println(Character.toUpperCase(97));
System.out.println(Character.toUpperCase(48));

System.out.println(Character.toLowerCase('A'));
System.out.println(Character.toLowerCase(65));
System.out.println(Character.toLowerCase(48));

System.out.println(Character.toString('x'));
System.out.println(Character.toString('Y'));
int code = 0x9000;

int ans = Character.charCount(code);

// prints 2 if character is greater than 0x10000
// otherwise 1
System.out.println(ans);

int codes = 0x12456;

int ans1 = Character.charCount(codes);

// prints 2 if character is greater than 0x10000
// otherwise 1
System.out.println(ans1);

    
//create and assign value
// to 2 character objects
char c1 = '3', c2 = '6';

// assign the numeric value of c1 to in1 using radix
int in1 = Character.digit(c1, 5);
System.out.println("Numeric value of " + c1 + " in radix 5 is " + in1);

// assign the numeric value of c2 to in2 using radix
int in2 = Character.digit(c2, 15);
System.out.println("Numeric value of " + c2 + " in radix 15 is " + in2); 
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    }}
